//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    
    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 31 images.
  struct image {
    /// Image `add_button`.
    static let add_button = Rswift.ImageResource(bundle: R.hostingBundle, name: "add_button")
    /// Image `icon_angle_double`.
    static let icon_angle_double = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_angle_double")
    /// Image `icon_arrow_cicle_o_right`.
    static let icon_arrow_cicle_o_right = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_arrow_cicle_o_right")
    /// Image `icon_bookmark`.
    static let icon_bookmark = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_bookmark")
    /// Image `icon_camera`.
    static let icon_camera = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_camera")
    /// Image `icon_check_square_o`.
    static let icon_check_square_o = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_check_square_o")
    /// Image `icon_circle_down`.
    static let icon_circle_down = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_circle_down")
    /// Image `icon_circle_o`.
    static let icon_circle_o = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_circle_o")
    /// Image `icon_clock_o`.
    static let icon_clock_o = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_clock_o")
    /// Image `icon_close`.
    static let icon_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_close")
    /// Image `icon_dot_circle_o`.
    static let icon_dot_circle_o = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_dot_circle_o")
    /// Image `icon_edit`.
    static let icon_edit = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_edit")
    /// Image `icon_eye`.
    static let icon_eye = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_eye")
    /// Image `icon_home`.
    static let icon_home = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_home")
    /// Image `icon_humi`.
    static let icon_humi = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_humi")
    /// Image `icon_image`.
    static let icon_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_image")
    /// Image `icon_info`.
    static let icon_info = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_info")
    /// Image `icon_link`.
    static let icon_link = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_link")
    /// Image `icon_next`.
    static let icon_next = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_next")
    /// Image `icon_pie_chart`.
    static let icon_pie_chart = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_pie_chart")
    /// Image `icon_plug`.
    static let icon_plug = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_plug")
    /// Image `icon_plus`.
    static let icon_plus = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_plus")
    /// Image `icon_power_off`.
    static let icon_power_off = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_power_off")
    /// Image `icon_publish`.
    static let icon_publish = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_publish")
    /// Image `icon_qrcode`.
    static let icon_qrcode = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_qrcode")
    /// Image `icon_save`.
    static let icon_save = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_save")
    /// Image `icon_sign_in`.
    static let icon_sign_in = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_sign_in")
    /// Image `icon_square_o`.
    static let icon_square_o = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_square_o")
    /// Image `icon_temp`.
    static let icon_temp = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_temp")
    /// Image `icon_trash`.
    static let icon_trash = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_trash")
    /// Image `icon`.
    static let icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon")
    
    /// `UIImage(named: "add_button", bundle: ..., traitCollection: ...)`
    static func add_button(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.add_button, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon", bundle: ..., traitCollection: ...)`
    static func icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_angle_double", bundle: ..., traitCollection: ...)`
    static func icon_angle_double(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_angle_double, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_arrow_cicle_o_right", bundle: ..., traitCollection: ...)`
    static func icon_arrow_cicle_o_right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_arrow_cicle_o_right, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_bookmark", bundle: ..., traitCollection: ...)`
    static func icon_bookmark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_bookmark, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_camera", bundle: ..., traitCollection: ...)`
    static func icon_camera(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_camera, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_check_square_o", bundle: ..., traitCollection: ...)`
    static func icon_check_square_o(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_check_square_o, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_circle_down", bundle: ..., traitCollection: ...)`
    static func icon_circle_down(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_circle_down, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_circle_o", bundle: ..., traitCollection: ...)`
    static func icon_circle_o(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_circle_o, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_clock_o", bundle: ..., traitCollection: ...)`
    static func icon_clock_o(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_clock_o, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_close", bundle: ..., traitCollection: ...)`
    static func icon_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_close, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_dot_circle_o", bundle: ..., traitCollection: ...)`
    static func icon_dot_circle_o(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_dot_circle_o, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_edit", bundle: ..., traitCollection: ...)`
    static func icon_edit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_edit, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_eye", bundle: ..., traitCollection: ...)`
    static func icon_eye(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_eye, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_home", bundle: ..., traitCollection: ...)`
    static func icon_home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_home, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_humi", bundle: ..., traitCollection: ...)`
    static func icon_humi(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_humi, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_image", bundle: ..., traitCollection: ...)`
    static func icon_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_image, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_info", bundle: ..., traitCollection: ...)`
    static func icon_info(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_info, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_link", bundle: ..., traitCollection: ...)`
    static func icon_link(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_link, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_next", bundle: ..., traitCollection: ...)`
    static func icon_next(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_next, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_pie_chart", bundle: ..., traitCollection: ...)`
    static func icon_pie_chart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_pie_chart, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_plug", bundle: ..., traitCollection: ...)`
    static func icon_plug(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_plug, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_plus", bundle: ..., traitCollection: ...)`
    static func icon_plus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_plus, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_power_off", bundle: ..., traitCollection: ...)`
    static func icon_power_off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_power_off, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_publish", bundle: ..., traitCollection: ...)`
    static func icon_publish(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_publish, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_qrcode", bundle: ..., traitCollection: ...)`
    static func icon_qrcode(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_qrcode, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_save", bundle: ..., traitCollection: ...)`
    static func icon_save(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_save, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_sign_in", bundle: ..., traitCollection: ...)`
    static func icon_sign_in(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_sign_in, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_square_o", bundle: ..., traitCollection: ...)`
    static func icon_square_o(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_square_o, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_temp", bundle: ..., traitCollection: ...)`
    static func icon_temp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_temp, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_trash", bundle: ..., traitCollection: ...)`
    static func icon_trash(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_trash, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 32 nibs.
  struct nib {
    /// Nib `AddItemTopicCell`.
    static let addItemTopicCell = _R.nib._AddItemTopicCell()
    /// Nib `BarChartViewController`.
    static let barChartViewController = _R.nib._BarChartViewController()
    /// Nib `CandleStickChartViewController`.
    static let candleStickChartViewController = _R.nib._CandleStickChartViewController()
    /// Nib `HumidityCell`.
    static let humidityCell = _R.nib._HumidityCell()
    /// Nib `ItemDetailFooterCell`.
    static let itemDetailFooterCell = _R.nib._ItemDetailFooterCell()
    /// Nib `ItemDetailHeaderCell`.
    static let itemDetailHeaderCell = _R.nib._ItemDetailHeaderCell()
    /// Nib `ItemDetailPlusCell`.
    static let itemDetailPlusCell = _R.nib._ItemDetailPlusCell()
    /// Nib `ItemDetailSwitchCell`.
    static let itemDetailSwitchCell = _R.nib._ItemDetailSwitchCell()
    /// Nib `ItemDetailTopicCell`.
    static let itemDetailTopicCell = _R.nib._ItemDetailTopicCell()
    /// Nib `ItemDetailTrashCell`.
    static let itemDetailTrashCell = _R.nib._ItemDetailTrashCell()
    /// Nib `ItemImageCell`.
    static let itemImageCell = _R.nib._ItemImageCell()
    /// Nib `ItemInputValueCell`.
    static let itemInputValueCell = _R.nib._ItemInputValueCell()
    /// Nib `ItemListCell`.
    static let itemListCell = _R.nib._ItemListCell()
    /// Nib `ItemListPlusCell`.
    static let itemListPlusCell = _R.nib._ItemListPlusCell()
    /// Nib `ItemNameCell`.
    static let itemNameCell = _R.nib._ItemNameCell()
    /// Nib `ItemNameHeaderCell`.
    static let itemNameHeaderCell = _R.nib._ItemNameHeaderCell()
    /// Nib `ItemSaveCell`.
    static let itemSaveCell = _R.nib._ItemSaveCell()
    /// Nib `ItemTopicCell`.
    static let itemTopicCell = _R.nib._ItemTopicCell()
    /// Nib `ItemTopicServerCell`.
    static let itemTopicServerCell = _R.nib._ItemTopicServerCell()
    /// Nib `ItemTopicSignInCell`.
    static let itemTopicSignInCell = _R.nib._ItemTopicSignInCell()
    /// Nib `LineChart3ViewController`.
    static let lineChart3ViewController = _R.nib._LineChart3ViewController()
    /// Nib `MotionCell`.
    static let motionCell = _R.nib._MotionCell()
    /// Nib `PositiveNegativeBarChartViewController`.
    static let positiveNegativeBarChartViewController = _R.nib._PositiveNegativeBarChartViewController()
    /// Nib `SelectionCell`.
    static let selectionCell = _R.nib._SelectionCell()
    /// Nib `SelectionServerCell`.
    static let selectionServerCell = _R.nib._SelectionServerCell()
    /// Nib `ServerCell`.
    static let serverCell = _R.nib._ServerCell()
    /// Nib `TemperatureCell`.
    static let temperatureCell = _R.nib._TemperatureCell()
    /// Nib `TopicCell`.
    static let topicCell = _R.nib._TopicCell()
    /// Nib `TopicQosCell`.
    static let topicQosCell = _R.nib._TopicQosCell()
    /// Nib `TopicSaveCell`.
    static let topicSaveCell = _R.nib._TopicSaveCell()
    /// Nib `TopicSwitchCell`.
    static let topicSwitchCell = _R.nib._TopicSwitchCell()
    /// Nib `TopicTypeCell`.
    static let topicTypeCell = _R.nib._TopicTypeCell()
    
    /// `UINib(name: "AddItemTopicCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.addItemTopicCell) instead")
    static func addItemTopicCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addItemTopicCell)
    }
    
    /// `UINib(name: "BarChartViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.barChartViewController) instead")
    static func barChartViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.barChartViewController)
    }
    
    /// `UINib(name: "CandleStickChartViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.candleStickChartViewController) instead")
    static func candleStickChartViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.candleStickChartViewController)
    }
    
    /// `UINib(name: "HumidityCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.humidityCell) instead")
    static func humidityCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.humidityCell)
    }
    
    /// `UINib(name: "ItemDetailFooterCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.itemDetailFooterCell) instead")
    static func itemDetailFooterCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.itemDetailFooterCell)
    }
    
    /// `UINib(name: "ItemDetailHeaderCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.itemDetailHeaderCell) instead")
    static func itemDetailHeaderCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.itemDetailHeaderCell)
    }
    
    /// `UINib(name: "ItemDetailPlusCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.itemDetailPlusCell) instead")
    static func itemDetailPlusCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.itemDetailPlusCell)
    }
    
    /// `UINib(name: "ItemDetailSwitchCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.itemDetailSwitchCell) instead")
    static func itemDetailSwitchCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.itemDetailSwitchCell)
    }
    
    /// `UINib(name: "ItemDetailTopicCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.itemDetailTopicCell) instead")
    static func itemDetailTopicCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.itemDetailTopicCell)
    }
    
    /// `UINib(name: "ItemDetailTrashCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.itemDetailTrashCell) instead")
    static func itemDetailTrashCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.itemDetailTrashCell)
    }
    
    /// `UINib(name: "ItemImageCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.itemImageCell) instead")
    static func itemImageCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.itemImageCell)
    }
    
    /// `UINib(name: "ItemInputValueCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.itemInputValueCell) instead")
    static func itemInputValueCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.itemInputValueCell)
    }
    
    /// `UINib(name: "ItemListCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.itemListCell) instead")
    static func itemListCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.itemListCell)
    }
    
    /// `UINib(name: "ItemListPlusCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.itemListPlusCell) instead")
    static func itemListPlusCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.itemListPlusCell)
    }
    
    /// `UINib(name: "ItemNameCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.itemNameCell) instead")
    static func itemNameCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.itemNameCell)
    }
    
    /// `UINib(name: "ItemNameHeaderCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.itemNameHeaderCell) instead")
    static func itemNameHeaderCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.itemNameHeaderCell)
    }
    
    /// `UINib(name: "ItemSaveCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.itemSaveCell) instead")
    static func itemSaveCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.itemSaveCell)
    }
    
    /// `UINib(name: "ItemTopicCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.itemTopicCell) instead")
    static func itemTopicCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.itemTopicCell)
    }
    
    /// `UINib(name: "ItemTopicServerCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.itemTopicServerCell) instead")
    static func itemTopicServerCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.itemTopicServerCell)
    }
    
    /// `UINib(name: "ItemTopicSignInCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.itemTopicSignInCell) instead")
    static func itemTopicSignInCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.itemTopicSignInCell)
    }
    
    /// `UINib(name: "LineChart3ViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.lineChart3ViewController) instead")
    static func lineChart3ViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.lineChart3ViewController)
    }
    
    /// `UINib(name: "MotionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.motionCell) instead")
    static func motionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.motionCell)
    }
    
    /// `UINib(name: "PositiveNegativeBarChartViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.positiveNegativeBarChartViewController) instead")
    static func positiveNegativeBarChartViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.positiveNegativeBarChartViewController)
    }
    
    /// `UINib(name: "SelectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.selectionCell) instead")
    static func selectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.selectionCell)
    }
    
    /// `UINib(name: "SelectionServerCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.selectionServerCell) instead")
    static func selectionServerCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.selectionServerCell)
    }
    
    /// `UINib(name: "ServerCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.serverCell) instead")
    static func serverCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.serverCell)
    }
    
    /// `UINib(name: "TemperatureCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.temperatureCell) instead")
    static func temperatureCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.temperatureCell)
    }
    
    /// `UINib(name: "TopicCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.topicCell) instead")
    static func topicCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.topicCell)
    }
    
    /// `UINib(name: "TopicQosCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.topicQosCell) instead")
    static func topicQosCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.topicQosCell)
    }
    
    /// `UINib(name: "TopicSaveCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.topicSaveCell) instead")
    static func topicSaveCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.topicSaveCell)
    }
    
    /// `UINib(name: "TopicSwitchCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.topicSwitchCell) instead")
    static func topicSwitchCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.topicSwitchCell)
    }
    
    /// `UINib(name: "TopicTypeCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.topicTypeCell) instead")
    static func topicTypeCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.topicTypeCell)
    }
    
    static func addItemTopicCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AddItemTopicCell? {
      return R.nib.addItemTopicCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddItemTopicCell
    }
    
    static func barChartViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.barChartViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func candleStickChartViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.candleStickChartViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func humidityCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HumidityCell? {
      return R.nib.humidityCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HumidityCell
    }
    
    static func itemDetailFooterCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ItemDetailFooterCell? {
      return R.nib.itemDetailFooterCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ItemDetailFooterCell
    }
    
    static func itemDetailHeaderCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ItemDetailHeaderCell? {
      return R.nib.itemDetailHeaderCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ItemDetailHeaderCell
    }
    
    static func itemDetailPlusCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ItemDetailPlusCell? {
      return R.nib.itemDetailPlusCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ItemDetailPlusCell
    }
    
    static func itemDetailSwitchCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ItemDetailSwitchCell? {
      return R.nib.itemDetailSwitchCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ItemDetailSwitchCell
    }
    
    static func itemDetailTopicCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ItemDetailTopicCell? {
      return R.nib.itemDetailTopicCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ItemDetailTopicCell
    }
    
    static func itemDetailTrashCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ItemDetailTrashCell? {
      return R.nib.itemDetailTrashCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ItemDetailTrashCell
    }
    
    static func itemImageCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ItemImageCell? {
      return R.nib.itemImageCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ItemImageCell
    }
    
    static func itemInputValueCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ItemInputValueCell? {
      return R.nib.itemInputValueCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ItemInputValueCell
    }
    
    static func itemListCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ItemListCell? {
      return R.nib.itemListCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ItemListCell
    }
    
    static func itemListPlusCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ItemListPlusCell? {
      return R.nib.itemListPlusCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ItemListPlusCell
    }
    
    static func itemNameCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ItemNameCell? {
      return R.nib.itemNameCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ItemNameCell
    }
    
    static func itemNameHeaderCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ItemNameHeaderCell? {
      return R.nib.itemNameHeaderCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ItemNameHeaderCell
    }
    
    static func itemSaveCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ItemSaveCell? {
      return R.nib.itemSaveCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ItemSaveCell
    }
    
    static func itemTopicCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ItemTopicCell? {
      return R.nib.itemTopicCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ItemTopicCell
    }
    
    static func itemTopicServerCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ItemTopicServerCell? {
      return R.nib.itemTopicServerCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ItemTopicServerCell
    }
    
    static func itemTopicSignInCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ItemTopicSignInCell? {
      return R.nib.itemTopicSignInCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ItemTopicSignInCell
    }
    
    static func lineChart3ViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.lineChart3ViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func motionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MotionCell? {
      return R.nib.motionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MotionCell
    }
    
    static func positiveNegativeBarChartViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.positiveNegativeBarChartViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func selectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SelectionCell? {
      return R.nib.selectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SelectionCell
    }
    
    static func selectionServerCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SelectionServerCell? {
      return R.nib.selectionServerCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SelectionServerCell
    }
    
    static func serverCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ServerCell? {
      return R.nib.serverCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ServerCell
    }
    
    static func temperatureCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TemperatureCell? {
      return R.nib.temperatureCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TemperatureCell
    }
    
    static func topicCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TopicCell? {
      return R.nib.topicCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TopicCell
    }
    
    static func topicQosCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TopicQosCell? {
      return R.nib.topicQosCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TopicQosCell
    }
    
    static func topicSaveCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TopicSaveCell? {
      return R.nib.topicSaveCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TopicSaveCell
    }
    
    static func topicSwitchCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TopicSwitchCell? {
      return R.nib.topicSwitchCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TopicSwitchCell
    }
    
    static func topicTypeCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TopicTypeCell? {
      return R.nib.topicTypeCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TopicTypeCell
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 27 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `AddItemTopicCell`.
    static let addItemTopicCell: Rswift.ReuseIdentifier<AddItemTopicCell> = Rswift.ReuseIdentifier(identifier: "AddItemTopicCell")
    /// Reuse identifier `HumidityCell`.
    static let humidityCell: Rswift.ReuseIdentifier<HumidityCell> = Rswift.ReuseIdentifier(identifier: "HumidityCell")
    /// Reuse identifier `ItemDetailFooterCell`.
    static let itemDetailFooterCell: Rswift.ReuseIdentifier<ItemDetailFooterCell> = Rswift.ReuseIdentifier(identifier: "ItemDetailFooterCell")
    /// Reuse identifier `ItemDetailHeaderCell`.
    static let itemDetailHeaderCell: Rswift.ReuseIdentifier<ItemDetailHeaderCell> = Rswift.ReuseIdentifier(identifier: "ItemDetailHeaderCell")
    /// Reuse identifier `ItemDetailPlusCell`.
    static let itemDetailPlusCell: Rswift.ReuseIdentifier<ItemDetailPlusCell> = Rswift.ReuseIdentifier(identifier: "ItemDetailPlusCell")
    /// Reuse identifier `ItemDetailSwitchCell`.
    static let itemDetailSwitchCell: Rswift.ReuseIdentifier<ItemDetailSwitchCell> = Rswift.ReuseIdentifier(identifier: "ItemDetailSwitchCell")
    /// Reuse identifier `ItemDetailTopicCell`.
    static let itemDetailTopicCell: Rswift.ReuseIdentifier<ItemDetailTopicCell> = Rswift.ReuseIdentifier(identifier: "ItemDetailTopicCell")
    /// Reuse identifier `ItemDetailTrashCell`.
    static let itemDetailTrashCell: Rswift.ReuseIdentifier<ItemDetailTrashCell> = Rswift.ReuseIdentifier(identifier: "ItemDetailTrashCell")
    /// Reuse identifier `ItemImageCell`.
    static let itemImageCell: Rswift.ReuseIdentifier<ItemImageCell> = Rswift.ReuseIdentifier(identifier: "ItemImageCell")
    /// Reuse identifier `ItemInputValueCell`.
    static let itemInputValueCell: Rswift.ReuseIdentifier<ItemInputValueCell> = Rswift.ReuseIdentifier(identifier: "ItemInputValueCell")
    /// Reuse identifier `ItemListPlusCell`.
    static let itemListPlusCell: Rswift.ReuseIdentifier<ItemListPlusCell> = Rswift.ReuseIdentifier(identifier: "ItemListPlusCell")
    /// Reuse identifier `ItemNameCell`.
    static let itemNameCell: Rswift.ReuseIdentifier<ItemNameCell> = Rswift.ReuseIdentifier(identifier: "ItemNameCell")
    /// Reuse identifier `ItemNameHeaderCell`.
    static let itemNameHeaderCell: Rswift.ReuseIdentifier<ItemNameHeaderCell> = Rswift.ReuseIdentifier(identifier: "ItemNameHeaderCell")
    /// Reuse identifier `ItemSaveCell`.
    static let itemSaveCell: Rswift.ReuseIdentifier<ItemSaveCell> = Rswift.ReuseIdentifier(identifier: "ItemSaveCell")
    /// Reuse identifier `ItemTopicCell`.
    static let itemTopicCell: Rswift.ReuseIdentifier<ItemTopicCell> = Rswift.ReuseIdentifier(identifier: "ItemTopicCell")
    /// Reuse identifier `ItemTopicServerCell`.
    static let itemTopicServerCell: Rswift.ReuseIdentifier<ItemTopicServerCell> = Rswift.ReuseIdentifier(identifier: "ItemTopicServerCell")
    /// Reuse identifier `ItemTopicSignInCell`.
    static let itemTopicSignInCell: Rswift.ReuseIdentifier<ItemTopicSignInCell> = Rswift.ReuseIdentifier(identifier: "ItemTopicSignInCell")
    /// Reuse identifier `MotionCell`.
    static let motionCell: Rswift.ReuseIdentifier<MotionCell> = Rswift.ReuseIdentifier(identifier: "MotionCell")
    /// Reuse identifier `SelectionCell`.
    static let selectionCell: Rswift.ReuseIdentifier<SelectionCell> = Rswift.ReuseIdentifier(identifier: "SelectionCell")
    /// Reuse identifier `SelectionServerCell`.
    static let selectionServerCell: Rswift.ReuseIdentifier<SelectionServerCell> = Rswift.ReuseIdentifier(identifier: "SelectionServerCell")
    /// Reuse identifier `ServerCell`.
    static let serverCell: Rswift.ReuseIdentifier<ServerCell> = Rswift.ReuseIdentifier(identifier: "ServerCell")
    /// Reuse identifier `TemperatureCell`.
    static let temperatureCell: Rswift.ReuseIdentifier<TemperatureCell> = Rswift.ReuseIdentifier(identifier: "TemperatureCell")
    /// Reuse identifier `TopicCell`.
    static let topicCell: Rswift.ReuseIdentifier<TopicCell> = Rswift.ReuseIdentifier(identifier: "TopicCell")
    /// Reuse identifier `TopicQosCell`.
    static let topicQosCell: Rswift.ReuseIdentifier<TopicQosCell> = Rswift.ReuseIdentifier(identifier: "TopicQosCell")
    /// Reuse identifier `TopicSaveCell`.
    static let topicSaveCell: Rswift.ReuseIdentifier<TopicSaveCell> = Rswift.ReuseIdentifier(identifier: "TopicSaveCell")
    /// Reuse identifier `TopicSwitchCell`.
    static let topicSwitchCell: Rswift.ReuseIdentifier<TopicSwitchCell> = Rswift.ReuseIdentifier(identifier: "TopicSwitchCell")
    /// Reuse identifier `TopicTypeCell`.
    static let topicTypeCell: Rswift.ReuseIdentifier<TopicTypeCell> = Rswift.ReuseIdentifier(identifier: "TopicTypeCell")
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 10 storyboards.
  struct storyboard {
    /// Storyboard `AddItemViewController`.
    static let addItemViewController = _R.storyboard.addItemViewController()
    /// Storyboard `AddItem`.
    static let addItem = _R.storyboard.addItem()
    /// Storyboard `Connection`.
    static let connection = _R.storyboard.connection()
    /// Storyboard `ItemDetailTempViewController`.
    static let itemDetailTempViewController = _R.storyboard.itemDetailTempViewController()
    /// Storyboard `ItemDetail`.
    static let itemDetail = _R.storyboard.itemDetail()
    /// Storyboard `ItemListViewController`.
    static let itemListViewController = _R.storyboard.itemListViewController()
    /// Storyboard `ItemList`.
    static let itemList = _R.storyboard.itemList()
    /// Storyboard `ItemTopic`.
    static let itemTopic = _R.storyboard.itemTopic()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Selection`.
    static let selection = _R.storyboard.selection()
    
    /// `UIStoryboard(name: "AddItem", bundle: ...)`
    static func addItem(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.addItem)
    }
    
    /// `UIStoryboard(name: "AddItemViewController", bundle: ...)`
    static func addItemViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.addItemViewController)
    }
    
    /// `UIStoryboard(name: "Connection", bundle: ...)`
    static func connection(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.connection)
    }
    
    /// `UIStoryboard(name: "ItemDetail", bundle: ...)`
    static func itemDetail(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.itemDetail)
    }
    
    /// `UIStoryboard(name: "ItemDetailTempViewController", bundle: ...)`
    static func itemDetailTempViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.itemDetailTempViewController)
    }
    
    /// `UIStoryboard(name: "ItemList", bundle: ...)`
    static func itemList(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.itemList)
    }
    
    /// `UIStoryboard(name: "ItemListViewController", bundle: ...)`
    static func itemListViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.itemListViewController)
    }
    
    /// `UIStoryboard(name: "ItemTopic", bundle: ...)`
    static func itemTopic(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.itemTopic)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Selection", bundle: ...)`
    static func selection(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.selection)
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _HumidityCell.validate()
      try _ItemDetailHeaderCell.validate()
      try _ItemDetailPlusCell.validate()
      try _ItemDetailSwitchCell.validate()
      try _ItemDetailTopicCell.validate()
      try _ItemDetailTrashCell.validate()
      try _ItemImageCell.validate()
      try _ItemInputValueCell.validate()
      try _ItemListCell.validate()
      try _ItemListPlusCell.validate()
      try _ItemNameCell.validate()
      try _ItemSaveCell.validate()
      try _ItemTopicCell.validate()
      try _ItemTopicServerCell.validate()
      try _ItemTopicSignInCell.validate()
      try _SelectionServerCell.validate()
      try _ServerCell.validate()
      try _TemperatureCell.validate()
      try _TopicCell.validate()
      try _TopicQosCell.validate()
      try _TopicSaveCell.validate()
    }
    
    struct _AddItemTopicCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = AddItemTopicCell
      
      let bundle = R.hostingBundle
      let identifier = "AddItemTopicCell"
      let name = "AddItemTopicCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AddItemTopicCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddItemTopicCell
      }
      
      fileprivate init() {}
    }
    
    struct _BarChartViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "BarChartViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _CandleStickChartViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CandleStickChartViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _HumidityCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = HumidityCell
      
      let bundle = R.hostingBundle
      let identifier = "HumidityCell"
      let name = "HumidityCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HumidityCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HumidityCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_humi.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_humi.png' is used in nib 'HumidityCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _ItemDetailFooterCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ItemDetailFooterCell
      
      let bundle = R.hostingBundle
      let identifier = "ItemDetailFooterCell"
      let name = "ItemDetailFooterCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ItemDetailFooterCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ItemDetailFooterCell
      }
      
      fileprivate init() {}
    }
    
    struct _ItemDetailHeaderCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ItemDetailHeaderCell
      
      let bundle = R.hostingBundle
      let identifier = "ItemDetailHeaderCell"
      let name = "ItemDetailHeaderCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ItemDetailHeaderCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ItemDetailHeaderCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_bookmark", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_bookmark' is used in nib 'ItemDetailHeaderCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_edit", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_edit' is used in nib 'ItemDetailHeaderCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _ItemDetailPlusCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ItemDetailPlusCell
      
      let bundle = R.hostingBundle
      let identifier = "ItemDetailPlusCell"
      let name = "ItemDetailPlusCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ItemDetailPlusCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ItemDetailPlusCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_plus", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_plus' is used in nib 'ItemDetailPlusCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _ItemDetailSwitchCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ItemDetailSwitchCell
      
      let bundle = R.hostingBundle
      let identifier = "ItemDetailSwitchCell"
      let name = "ItemDetailSwitchCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ItemDetailSwitchCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ItemDetailSwitchCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_angle_double", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_angle_double' is used in nib 'ItemDetailSwitchCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_clock_o", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_clock_o' is used in nib 'ItemDetailSwitchCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_info", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_info' is used in nib 'ItemDetailSwitchCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_power_off", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_power_off' is used in nib 'ItemDetailSwitchCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _ItemDetailTopicCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ItemDetailTopicCell
      
      let bundle = R.hostingBundle
      let identifier = "ItemDetailTopicCell"
      let name = "ItemDetailTopicCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ItemDetailTopicCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ItemDetailTopicCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_angle_double", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_angle_double' is used in nib 'ItemDetailTopicCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_clock_o", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_clock_o' is used in nib 'ItemDetailTopicCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_info", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_info' is used in nib 'ItemDetailTopicCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_publish", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_publish' is used in nib 'ItemDetailTopicCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _ItemDetailTrashCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ItemDetailTrashCell
      
      let bundle = R.hostingBundle
      let identifier = "ItemDetailTrashCell"
      let name = "ItemDetailTrashCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ItemDetailTrashCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ItemDetailTrashCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_trash", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_trash' is used in nib 'ItemDetailTrashCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _ItemImageCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ItemImageCell
      
      let bundle = R.hostingBundle
      let identifier = "ItemImageCell"
      let name = "ItemImageCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ItemImageCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ItemImageCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_camera", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_camera' is used in nib 'ItemImageCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_check_square_o", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_check_square_o' is used in nib 'ItemImageCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_square_o", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_square_o' is used in nib 'ItemImageCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _ItemInputValueCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ItemInputValueCell
      
      let bundle = R.hostingBundle
      let identifier = "ItemInputValueCell"
      let name = "ItemInputValueCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ItemInputValueCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ItemInputValueCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_home", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_home' is used in nib 'ItemInputValueCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _ItemListCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ItemListCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ItemListCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ItemListCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_plug", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_plug' is used in nib 'ItemListCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _ItemListPlusCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ItemListPlusCell
      
      let bundle = R.hostingBundle
      let identifier = "ItemListPlusCell"
      let name = "ItemListPlusCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ItemListPlusCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ItemListPlusCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_plus", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_plus' is used in nib 'ItemListPlusCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _ItemNameCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ItemNameCell
      
      let bundle = R.hostingBundle
      let identifier = "ItemNameCell"
      let name = "ItemNameCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ItemNameCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ItemNameCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_angle_double", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_angle_double' is used in nib 'ItemNameCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _ItemNameHeaderCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ItemNameHeaderCell
      
      let bundle = R.hostingBundle
      let identifier = "ItemNameHeaderCell"
      let name = "ItemNameHeaderCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ItemNameHeaderCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ItemNameHeaderCell
      }
      
      fileprivate init() {}
    }
    
    struct _ItemSaveCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ItemSaveCell
      
      let bundle = R.hostingBundle
      let identifier = "ItemSaveCell"
      let name = "ItemSaveCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ItemSaveCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ItemSaveCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_save", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_save' is used in nib 'ItemSaveCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _ItemTopicCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ItemTopicCell
      
      let bundle = R.hostingBundle
      let identifier = "ItemTopicCell"
      let name = "ItemTopicCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ItemTopicCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ItemTopicCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_edit", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_edit' is used in nib 'ItemTopicCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _ItemTopicServerCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ItemTopicServerCell
      
      let bundle = R.hostingBundle
      let identifier = "ItemTopicServerCell"
      let name = "ItemTopicServerCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ItemTopicServerCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ItemTopicServerCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_edit", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_edit' is used in nib 'ItemTopicServerCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_eye", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_eye' is used in nib 'ItemTopicServerCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_link", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_link' is used in nib 'ItemTopicServerCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_trash", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_trash' is used in nib 'ItemTopicServerCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _ItemTopicSignInCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ItemTopicSignInCell
      
      let bundle = R.hostingBundle
      let identifier = "ItemTopicSignInCell"
      let name = "ItemTopicSignInCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ItemTopicSignInCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ItemTopicSignInCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_sign_in", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_sign_in' is used in nib 'ItemTopicSignInCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _LineChart3ViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "LineChart3ViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _MotionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = MotionCell
      
      let bundle = R.hostingBundle
      let identifier = "MotionCell"
      let name = "MotionCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MotionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MotionCell
      }
      
      fileprivate init() {}
    }
    
    struct _PositiveNegativeBarChartViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PositiveNegativeBarChartViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _SelectionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SelectionCell
      
      let bundle = R.hostingBundle
      let identifier = "SelectionCell"
      let name = "SelectionCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SelectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SelectionCell
      }
      
      fileprivate init() {}
    }
    
    struct _SelectionServerCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = SelectionServerCell
      
      let bundle = R.hostingBundle
      let identifier = "SelectionServerCell"
      let name = "SelectionServerCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SelectionServerCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SelectionServerCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_circle_o", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_circle_o' is used in nib 'SelectionServerCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_dot_circle_o", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_dot_circle_o' is used in nib 'SelectionServerCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _ServerCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ServerCell
      
      let bundle = R.hostingBundle
      let identifier = "ServerCell"
      let name = "ServerCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ServerCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ServerCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_circle_down", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_circle_down' is used in nib 'ServerCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_save", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_save' is used in nib 'ServerCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_trash", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_trash' is used in nib 'ServerCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _TemperatureCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = TemperatureCell
      
      let bundle = R.hostingBundle
      let identifier = "TemperatureCell"
      let name = "TemperatureCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TemperatureCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TemperatureCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_temp.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_temp.png' is used in nib 'TemperatureCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _TopicCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = TopicCell
      
      let bundle = R.hostingBundle
      let identifier = "TopicCell"
      let name = "TopicCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TopicCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TopicCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_circle_down", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_circle_down' is used in nib 'TopicCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _TopicQosCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = TopicQosCell
      
      let bundle = R.hostingBundle
      let identifier = "TopicQosCell"
      let name = "TopicQosCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TopicQosCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TopicQosCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_circle_o", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_circle_o' is used in nib 'TopicQosCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_dot_circle_o", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_dot_circle_o' is used in nib 'TopicQosCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _TopicSaveCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = TopicSaveCell
      
      let bundle = R.hostingBundle
      let identifier = "TopicSaveCell"
      let name = "TopicSaveCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TopicSaveCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TopicSaveCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_save", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_save' is used in nib 'TopicSaveCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _TopicSwitchCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = TopicSwitchCell
      
      let bundle = R.hostingBundle
      let identifier = "TopicSwitchCell"
      let name = "TopicSwitchCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TopicSwitchCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TopicSwitchCell
      }
      
      fileprivate init() {}
    }
    
    struct _TopicTypeCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = TopicTypeCell
      
      let bundle = R.hostingBundle
      let identifier = "TopicTypeCell"
      let name = "TopicTypeCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TopicTypeCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TopicTypeCell
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try addItem.validate()
      try addItemViewController.validate()
      try connection.validate()
      try itemDetail.validate()
      try itemDetailTempViewController.validate()
      try itemList.validate()
      try itemListViewController.validate()
      try itemTopic.validate()
      try launchScreen.validate()
      try selection.validate()
    }
    
    struct addItem: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "AddItem"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct addItemViewController: Rswift.StoryboardResourceType, Rswift.Validatable {
      let addItemSavingViewController = StoryboardViewControllerResource<IoTGarden.AddItemSavingViewController>(identifier: "AddItemSavingViewController")
      let addItemViewController = StoryboardViewControllerResource<AddItemViewController>(identifier: "AddItemViewController")
      let bundle = R.hostingBundle
      let name = "AddItemViewController"
      let selectionViewController = StoryboardViewControllerResource<SelectionViewController>(identifier: "SelectionViewController")
      
      func addItemSavingViewController(_: Void = ()) -> IoTGarden.AddItemSavingViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addItemSavingViewController)
      }
      
      func addItemViewController(_: Void = ()) -> AddItemViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addItemViewController)
      }
      
      func selectionViewController(_: Void = ()) -> SelectionViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: selectionViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.addItemViewController().addItemSavingViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addItemSavingViewController' could not be loaded from storyboard 'AddItemViewController' as 'IoTGarden.AddItemSavingViewController'.") }
        if _R.storyboard.addItemViewController().addItemViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addItemViewController' could not be loaded from storyboard 'AddItemViewController' as 'AddItemViewController'.") }
        if _R.storyboard.addItemViewController().selectionViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'selectionViewController' could not be loaded from storyboard 'AddItemViewController' as 'SelectionViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct connection: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Connection"
      let serverViewController = StoryboardViewControllerResource<ServerViewController>(identifier: "ServerViewController")
      let topicTypeViewController = StoryboardViewControllerResource<TopicTypeViewController>(identifier: "TopicTypeViewController")
      let topicViewController = StoryboardViewControllerResource<TopicViewController>(identifier: "TopicViewController")
      
      func serverViewController(_: Void = ()) -> ServerViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: serverViewController)
      }
      
      func topicTypeViewController(_: Void = ()) -> TopicTypeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: topicTypeViewController)
      }
      
      func topicViewController(_: Void = ()) -> TopicViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: topicViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.connection().serverViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'serverViewController' could not be loaded from storyboard 'Connection' as 'ServerViewController'.") }
        if _R.storyboard.connection().topicTypeViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'topicTypeViewController' could not be loaded from storyboard 'Connection' as 'TopicTypeViewController'.") }
        if _R.storyboard.connection().topicViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'topicViewController' could not be loaded from storyboard 'Connection' as 'TopicViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct itemDetail: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let itemDetailViewController = StoryboardViewControllerResource<IoTGarden.ItemDetailViewController>(identifier: "ItemDetailViewController")
      let name = "ItemDetail"
      let serverViewController = StoryboardViewControllerResource<ItemDetailServerViewController>(identifier: "ServerViewController")
      let topicViewController = StoryboardViewControllerResource<ItemDetailTopicViewController>(identifier: "TopicViewController")
      
      func itemDetailViewController(_: Void = ()) -> IoTGarden.ItemDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: itemDetailViewController)
      }
      
      func serverViewController(_: Void = ()) -> ItemDetailServerViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: serverViewController)
      }
      
      func topicViewController(_: Void = ()) -> ItemDetailTopicViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: topicViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.itemDetail().itemDetailViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'itemDetailViewController' could not be loaded from storyboard 'ItemDetail' as 'IoTGarden.ItemDetailViewController'.") }
        if _R.storyboard.itemDetail().serverViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'serverViewController' could not be loaded from storyboard 'ItemDetail' as 'ItemDetailServerViewController'.") }
        if _R.storyboard.itemDetail().topicViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'topicViewController' could not be loaded from storyboard 'ItemDetail' as 'ItemDetailTopicViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct itemDetailTempViewController: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let itemDetailTempViewController = StoryboardViewControllerResource<ItemDetailTempViewController>(identifier: "ItemDetailTempViewController")
      let name = "ItemDetailTempViewController"
      
      func itemDetailTempViewController(_: Void = ()) -> ItemDetailTempViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: itemDetailTempViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.itemDetailTempViewController().itemDetailTempViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'itemDetailTempViewController' could not be loaded from storyboard 'ItemDetailTempViewController' as 'ItemDetailTempViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct itemList: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let itemImageViewController = StoryboardViewControllerResource<ItemImageViewController>(identifier: "ItemImageViewController")
      let itemNameViewController = StoryboardViewControllerResource<ItemNameViewController>(identifier: "ItemNameViewController")
      let name = "ItemList"
      
      func itemImageViewController(_: Void = ()) -> ItemImageViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: itemImageViewController)
      }
      
      func itemNameViewController(_: Void = ()) -> ItemNameViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: itemNameViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_camera", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_camera' is used in storyboard 'ItemList', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_close' is used in storyboard 'ItemList', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_save", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_save' is used in storyboard 'ItemList', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.itemList().itemImageViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'itemImageViewController' could not be loaded from storyboard 'ItemList' as 'ItemImageViewController'.") }
        if _R.storyboard.itemList().itemNameViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'itemNameViewController' could not be loaded from storyboard 'ItemList' as 'ItemNameViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct itemListViewController: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let itemListViewController = StoryboardViewControllerResource<ItemListViewController>(identifier: "ItemListViewController")
      let name = "ItemListViewController"
      
      func itemListViewController(_: Void = ()) -> ItemListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: itemListViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.itemListViewController().itemListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'itemListViewController' could not be loaded from storyboard 'ItemListViewController' as 'ItemListViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct itemTopic: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ItemTopicViewController
      
      let bundle = R.hostingBundle
      let itemTopic = StoryboardViewControllerResource<ItemTopicViewController>(identifier: "ItemTopic")
      let name = "ItemTopic"
      
      func itemTopic(_: Void = ()) -> ItemTopicViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: itemTopic)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.itemTopic().itemTopic() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'itemTopic' could not be loaded from storyboard 'ItemTopic' as 'ItemTopicViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct selection: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Selection"
      let selectionViewController = StoryboardViewControllerResource<SelectionViewController>(identifier: "SelectionViewController")
      
      func selectionViewController(_: Void = ()) -> SelectionViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: selectionViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_save", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_save' is used in storyboard 'Selection', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.selection().selectionViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'selectionViewController' could not be loaded from storyboard 'Selection' as 'SelectionViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
