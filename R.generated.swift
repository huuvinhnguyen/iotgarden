//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.image` struct is generated, and contains static references to 4 images.
  struct image {
    /// Image `add_button`.
    static let add_button = Rswift.ImageResource(bundle: R.hostingBundle, name: "add_button")
    /// Image `icon_humi`.
    static let icon_humi = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_humi")
    /// Image `icon_temp`.
    static let icon_temp = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_temp")
    /// Image `icon`.
    static let icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon")
    
    /// `UIImage(named: "add_button", bundle: ..., traitCollection: ...)`
    static func add_button(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.add_button, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon", bundle: ..., traitCollection: ...)`
    static func icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_humi", bundle: ..., traitCollection: ...)`
    static func icon_humi(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_humi, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_temp", bundle: ..., traitCollection: ...)`
    static func icon_temp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_temp, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 9 nibs.
  struct nib {
    /// Nib `BarChartViewController`.
    static let barChartViewController = _R.nib._BarChartViewController()
    /// Nib `CandleStickChartViewController`.
    static let candleStickChartViewController = _R.nib._CandleStickChartViewController()
    /// Nib `HumidityCell`.
    static let humidityCell = _R.nib._HumidityCell()
    /// Nib `ItemListCell`.
    static let itemListCell = _R.nib._ItemListCell()
    /// Nib `LineChart3ViewController`.
    static let lineChart3ViewController = _R.nib._LineChart3ViewController()
    /// Nib `MotionCell`.
    static let motionCell = _R.nib._MotionCell()
    /// Nib `PositiveNegativeBarChartViewController`.
    static let positiveNegativeBarChartViewController = _R.nib._PositiveNegativeBarChartViewController()
    /// Nib `SelectionCell`.
    static let selectionCell = _R.nib._SelectionCell()
    /// Nib `TemperatureCell`.
    static let temperatureCell = _R.nib._TemperatureCell()
    
    /// `UINib(name: "BarChartViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.barChartViewController) instead")
    static func barChartViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.barChartViewController)
    }
    
    /// `UINib(name: "CandleStickChartViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.candleStickChartViewController) instead")
    static func candleStickChartViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.candleStickChartViewController)
    }
    
    /// `UINib(name: "HumidityCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.humidityCell) instead")
    static func humidityCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.humidityCell)
    }
    
    /// `UINib(name: "ItemListCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.itemListCell) instead")
    static func itemListCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.itemListCell)
    }
    
    /// `UINib(name: "LineChart3ViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.lineChart3ViewController) instead")
    static func lineChart3ViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.lineChart3ViewController)
    }
    
    /// `UINib(name: "MotionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.motionCell) instead")
    static func motionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.motionCell)
    }
    
    /// `UINib(name: "PositiveNegativeBarChartViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.positiveNegativeBarChartViewController) instead")
    static func positiveNegativeBarChartViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.positiveNegativeBarChartViewController)
    }
    
    /// `UINib(name: "SelectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.selectionCell) instead")
    static func selectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.selectionCell)
    }
    
    /// `UINib(name: "TemperatureCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.temperatureCell) instead")
    static func temperatureCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.temperatureCell)
    }
    
    static func barChartViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.barChartViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func candleStickChartViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.candleStickChartViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func humidityCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HumidityCell? {
      return R.nib.humidityCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HumidityCell
    }
    
    static func itemListCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ItemListCell? {
      return R.nib.itemListCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ItemListCell
    }
    
    static func lineChart3ViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.lineChart3ViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func motionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MotionCell? {
      return R.nib.motionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MotionCell
    }
    
    static func positiveNegativeBarChartViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.positiveNegativeBarChartViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func selectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SelectionCell? {
      return R.nib.selectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SelectionCell
    }
    
    static func temperatureCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TemperatureCell? {
      return R.nib.temperatureCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TemperatureCell
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 4 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `HumidityCell`.
    static let humidityCell: Rswift.ReuseIdentifier<HumidityCell> = Rswift.ReuseIdentifier(identifier: "HumidityCell")
    /// Reuse identifier `MotionCell`.
    static let motionCell: Rswift.ReuseIdentifier<MotionCell> = Rswift.ReuseIdentifier(identifier: "MotionCell")
    /// Reuse identifier `SelectionCell`.
    static let selectionCell: Rswift.ReuseIdentifier<SelectionCell> = Rswift.ReuseIdentifier(identifier: "SelectionCell")
    /// Reuse identifier `TemperatureCell`.
    static let temperatureCell: Rswift.ReuseIdentifier<TemperatureCell> = Rswift.ReuseIdentifier(identifier: "TemperatureCell")
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 5 storyboards.
  struct storyboard {
    /// Storyboard `AddItemViewController`.
    static let addItemViewController = _R.storyboard.addItemViewController()
    /// Storyboard `ItemDetailTempViewController`.
    static let itemDetailTempViewController = _R.storyboard.itemDetailTempViewController()
    /// Storyboard `ItemDetailViewController`.
    static let itemDetailViewController = _R.storyboard.itemDetailViewController()
    /// Storyboard `ItemListViewController`.
    static let itemListViewController = _R.storyboard.itemListViewController()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    
    /// `UIStoryboard(name: "AddItemViewController", bundle: ...)`
    static func addItemViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.addItemViewController)
    }
    
    /// `UIStoryboard(name: "ItemDetailTempViewController", bundle: ...)`
    static func itemDetailTempViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.itemDetailTempViewController)
    }
    
    /// `UIStoryboard(name: "ItemDetailViewController", bundle: ...)`
    static func itemDetailViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.itemDetailViewController)
    }
    
    /// `UIStoryboard(name: "ItemListViewController", bundle: ...)`
    static func itemListViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.itemListViewController)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _HumidityCell.validate()
      try _TemperatureCell.validate()
    }
    
    struct _BarChartViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "BarChartViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _CandleStickChartViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CandleStickChartViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _HumidityCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = HumidityCell
      
      let bundle = R.hostingBundle
      let identifier = "HumidityCell"
      let name = "HumidityCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HumidityCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HumidityCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_humi.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_humi.png' is used in nib 'HumidityCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _ItemListCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ItemListCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ItemListCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ItemListCell
      }
      
      fileprivate init() {}
    }
    
    struct _LineChart3ViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "LineChart3ViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _MotionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = MotionCell
      
      let bundle = R.hostingBundle
      let identifier = "MotionCell"
      let name = "MotionCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MotionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MotionCell
      }
      
      fileprivate init() {}
    }
    
    struct _PositiveNegativeBarChartViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PositiveNegativeBarChartViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _SelectionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SelectionCell
      
      let bundle = R.hostingBundle
      let identifier = "SelectionCell"
      let name = "SelectionCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SelectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SelectionCell
      }
      
      fileprivate init() {}
    }
    
    struct _TemperatureCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = TemperatureCell
      
      let bundle = R.hostingBundle
      let identifier = "TemperatureCell"
      let name = "TemperatureCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TemperatureCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TemperatureCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_temp.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_temp.png' is used in nib 'TemperatureCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try addItemViewController.validate()
      try itemDetailTempViewController.validate()
      try itemDetailViewController.validate()
      try itemListViewController.validate()
      try launchScreen.validate()
    }
    
    struct addItemViewController: Rswift.StoryboardResourceType, Rswift.Validatable {
      let addItemSavingViewController = StoryboardViewControllerResource<IoTGarden.AddItemSavingViewController>(identifier: "AddItemSavingViewController")
      let addItemViewController = StoryboardViewControllerResource<AddItemViewController>(identifier: "AddItemViewController")
      let bundle = R.hostingBundle
      let name = "AddItemViewController"
      let selectionViewController = StoryboardViewControllerResource<SelectionViewController>(identifier: "SelectionViewController")
      
      func addItemSavingViewController(_: Void = ()) -> IoTGarden.AddItemSavingViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addItemSavingViewController)
      }
      
      func addItemViewController(_: Void = ()) -> AddItemViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addItemViewController)
      }
      
      func selectionViewController(_: Void = ()) -> SelectionViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: selectionViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.addItemViewController().addItemSavingViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addItemSavingViewController' could not be loaded from storyboard 'AddItemViewController' as 'IoTGarden.AddItemSavingViewController'.") }
        if _R.storyboard.addItemViewController().addItemViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addItemViewController' could not be loaded from storyboard 'AddItemViewController' as 'AddItemViewController'.") }
        if _R.storyboard.addItemViewController().selectionViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'selectionViewController' could not be loaded from storyboard 'AddItemViewController' as 'SelectionViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct itemDetailTempViewController: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let itemDetailTempViewController = StoryboardViewControllerResource<ItemDetailTempViewController>(identifier: "ItemDetailTempViewController")
      let name = "ItemDetailTempViewController"
      
      func itemDetailTempViewController(_: Void = ()) -> ItemDetailTempViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: itemDetailTempViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.itemDetailTempViewController().itemDetailTempViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'itemDetailTempViewController' could not be loaded from storyboard 'ItemDetailTempViewController' as 'ItemDetailTempViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct itemDetailViewController: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let itemDetailViewController = StoryboardViewControllerResource<IoTGarden.ItemDetailViewController>(identifier: "ItemDetailViewController")
      let name = "ItemDetailViewController"
      
      func itemDetailViewController(_: Void = ()) -> IoTGarden.ItemDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: itemDetailViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.itemDetailViewController().itemDetailViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'itemDetailViewController' could not be loaded from storyboard 'ItemDetailViewController' as 'IoTGarden.ItemDetailViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct itemListViewController: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let itemListViewController = StoryboardViewControllerResource<ItemListViewController>(identifier: "ItemListViewController")
      let name = "ItemListViewController"
      
      func itemListViewController(_: Void = ()) -> ItemListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: itemListViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "add_button", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'add_button' is used in storyboard 'ItemListViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.itemListViewController().itemListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'itemListViewController' could not be loaded from storyboard 'ItemListViewController' as 'ItemListViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
